tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.lexis.common.datatransfer
  template_version: 0.1.2-SNAPSHOT
  template_author: lexis

imports:
  - heappe-types:1.0.2
  - ddi-types:0.1.2
  - org.ystia.docker.images:3.0.0-SNAPSHOT
  - yorc-types:1.1.0
node_types:
  org.lexis.datatransfer.nodes.CopyToJobTask:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Copy files to a HEAppE Job task input directory
    properties:
      task_name:
        description: Name of the task in the Job
        type: string
        required: true
      source_directory:
        description: Directory containing files to copy
        type: string
        required: true
    requirements:
      - job:
          capability: org.heappe.capabilities.HeappeJob
          node: org.heappe.nodes.Job
          relationship: org.heappe.relationships.SendInputsToJob
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            user: {get_attribute: [REQ_TARGET, job, file_transfer, user]}
            private_key: {get_attribute: [REQ_TARGET, job, file_transfer, key]}
            server: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            job_directory: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            tasks_name_id: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            task_name: {get_property: [SELF, task_name]}
            source_directory: {get_property: [SELF, source_directory]}
          implementation: playbooks/copytojobtask.yaml
        delete:
          implementation: playbooks/noop.yaml
    tags:
      icon: images/copytojob.png
  org.lexis.datatransfer.nodes.CopySubDirToJobTask:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Copy files in a subdirectory of a parent directory to a HEAppE Job task input directory
    properties:
      task_name:
        description: Name of the task in the Job
        type: string
        required: true
      parent_directory:
        description: Parent directory containing the subdirectory
        type: string
        required: true
      subdirectory_index:
        description: Index of the subdirectory for which to copy content (0 means first subdir)
        type: integer
        required: true
    requirements:
      - job:
          capability: org.heappe.capabilities.HeappeJob
          node: org.heappe.nodes.Job
          relationship: org.heappe.relationships.SendInputsToJob
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            user: {get_attribute: [REQ_TARGET, job, file_transfer, user]}
            private_key: {get_attribute: [REQ_TARGET, job, file_transfer, key]}
            server: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            job_directory: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            tasks_name_id: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            task_name: {get_property: [SELF, task_name]}
            parent_directory: {get_property: [SELF, parent_directory]}
            subdirectory_index: {get_property: [SELF, subdirectory_index]}
          implementation: playbooks/copysubdirtojobtask.yaml
        delete:
          implementation: playbooks/noop.yaml
    tags:
      icon: images/copytojob.png
  org.lexis.datatransfer.nodes.CopyFromJobTask:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Copy files from a HEAppE Job task output directory
    properties:
      task_name:
        description: Name of the task in the Job
        type: string
        required: true
      source_files_patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of file patterns to copy from job output directory
        required: true
      destination_directory:
        description: Directory where to copy files
        type: string
        required: true
    requirements:
      - job:
          capability: org.heappe.capabilities.HeappeJob
          node: org.heappe.nodes.Job
          relationship: org.heappe.relationships.GetResultsFromJob
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            user: {get_attribute: [REQ_TARGET, job, file_transfer, user]}
            private_key: {get_attribute: [REQ_TARGET, job, file_transfer, key]}
            server: {get_attribute: [REQ_TARGET, job, file_transfer, server]}
            source_files_patterns: {get_property: [SELF, source_files_patterns]}
            job_directory: {get_attribute: [REQ_TARGET, job, file_transfer, path]}
            tasks_name_id: {get_attribute: [REQ_TARGET, job, tasks_name_id]}
            task_name: {get_property: [SELF, task_name]}
            destination_directory: {get_property: [SELF, destination_directory]}
          implementation: playbooks/copyfromjobtask.yaml
        delete:
          implementation: playbooks/noop.yaml
    tags:
      icon: images/copyfromjob.png
  org.lexis.datatransfer.nodes.MoveFile:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Move or rename a file (directories in path must exist)
    properties:
      source_file:
        description: Source file
        type: string
        required: true
      destination_file:
        description: Destination file
        type: string
        required: true
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_file: {get_property: [SELF, source_file]}
            destination_file: {get_property: [SELF, destination_file]}
          implementation: playbooks/movefile.yaml
        delete:
          implementation: playbooks/noop.yaml
  org.lexis.datatransfer.nodes.FindArchiveInStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Find a docker image archive based on given patterns in a staging area directory
    properties:
      patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of file patterns to match
        required: true
    attributes:
      path: {get_operation_output: [SELF, Standard, start, PATH]}
      user: {get_operation_output: [SELF, Standard, start, USER]}
    capabilities:
      archive_provider:
        type: org.ystia.docker.images.capabilities.ArchiveProvider
    requirements:
      - cloud_area_directory_provider:
          capability: org.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          inputs:
            patterns: {get_property: [SELF, patterns]}
            directory: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, directory_absolute_path]}
            user_name: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, user_name]}
          implementation: playbooks/find_file.yaml
  org.lexis.datatransfer.nodes.FindFileInStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Find one file based on given patterns in a staging area directory
    properties:
      patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of file patterns to match
        required: true
    attributes:
      path: {get_operation_output: [SELF, Standard, start, PATH]}
      user: {get_operation_output: [SELF, Standard, start, USER]}
    capabilities:
      file_provider:
        type: org.lexis.datatransfer.capabilities.FileProvider
    requirements:
      - cloud_area_directory_provider:
          capability: org.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          inputs:
            patterns: {get_property: [SELF, patterns]}
            directory: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, directory_absolute_path]}
            user_name: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, user_name]}
          implementation: playbooks/find_file.yaml
  org.lexis.datatransfer.nodes.FindFilesInStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Find all files based on given patterns in a staging area directory
    properties:
      patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of file patterns to match
        required: true
    attributes:
      paths: {get_operation_output: [SELF, Standard, start, FILES]}
      user: {get_operation_output: [SELF, Standard, start, USER]}
    capabilities:
      files_provider:
        type: org.lexis.datatransfer.capabilities.FilesProvider
    requirements:
      - cloud_area_directory_provider:
          capability: org.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          inputs:
            patterns: {get_property: [SELF, patterns]}
            directory: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, directory_absolute_path]}
            user_name: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, user_name]}
          implementation: playbooks/find_file.yaml
  org.lexis.datatransfer.nodes.CreateDirectories:
    derived_from: tosca.nodes.SoftwareComponent
    description: Create directories on a target
    properties:
      directories:
        type: list
        entry_schema:
          type: string
        description: List of directory to create
        required: true
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            dirs_to_create: {get_property: [SELF, directories]}
          implementation: playbooks/createdirs.yaml
    tags:
      icon: images/createDirs.png
  org.lexis.datatransfer.nodes.DeleteDirectories:
    derived_from: tosca.nodes.SoftwareComponent
    description: Delete directories on a target
    properties:
      directories:
        type: list
        entry_schema:
          type: string
        description: List of directory to delete
        required: true
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            dirs_to_delete: {get_property: [SELF, directories]}
          implementation: playbooks/deletedirs.yaml
  org.lexis.datatransfer.nodes.MountStagingArea:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Mount the Cloud Staging Area on host and create a user with write permission
    properties:
      mount_point:
        description: Directory where to mount the cloud staging area file system
        type: string
        required: true
      user_name:
        description: name of the user allowed to write in this staging area
        type: string
        default: lexisclouduser
      group_name:
        description: name of the group allowed to write in this staging area
        type: string
        default: lexiscloudgroup
    capabilities:
      mounted_staging_area:
        type: org.lexis.datatransfer.capabilities.MountedStagingAreaAccess
    requirements:
      - cloud_staging_area_access:
          capability: org.ddi.capabilities.CloudStagingAreaAccess
          relationship: org.lexis.datatransfer.relationships.MountCloudStagingArea
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            remote_file_system: {get_attribute: [REQ_TARGET, cloud_staging_area_access, remote_file_system]}
            mount_type: {get_attribute: [REQ_TARGET, cloud_staging_area_access, mount_type]}
            mount_options: {get_attribute: [REQ_TARGET, cloud_staging_area_access, mount_options]}
            mount_point: {get_property: [SELF, mount_point]}
            user_name: {get_property: [SELF, user_name]}
            group_name: {get_property: [SELF, group_name]}
            user_id: {get_attribute: [REQ_TARGET, cloud_staging_area_access, user_id]}
            group_id: {get_attribute: [REQ_TARGET, cloud_staging_area_access, group_id]}
          implementation: playbooks/setup_cloud_staging_area.yaml
  org.lexis.datatransfer.nodes.CreateStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Create a directory in the staging area, possibly using a timestamp useful
       to store results of a workflow run
    properties:
      directory:
        description: directory to create in staging area (relative path, will be created if it does not exist)
        type: string
        required: true
      create_timestamp_destination_subdirectory:
        description: If true, a subdirectory with the current timestamp will be created under the destination directory
        type: boolean
        default: false
    attributes:
      staging_area_directory_path: {get_operation_output: [SELF, Standard, start, STAGING_AREA_DIRECTORY]}
      directory_absolute_path: {get_operation_output: [SELF, Standard, start, DIRECTORY_ABSOLUTE_PATH]}
      user_name: {get_operation_output: [SELF, Standard, start, USER_NAME]}
    capabilities:
      cloud_area_directory_provider:
        type: org.ddi.capabilities.CloudAreaDirectoryProvider
    requirements:
      - mounted_staging_area:
          capability: org.lexis.datatransfer.capabilities.MountedStagingAreaAccess
          relationship: org.lexis.datatransfer.relationships.MountedCloudStagingArea
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            directory: {get_property: [SELF, directory]}
            create_timestamp_destination_subdirectory: {get_property: [SELF, create_timestamp_destination_subdirectory]}
            mount_point: {get_property: [REQ_TARGET, mounted_staging_area, mount_point]}
            user_name: {get_property: [REQ_TARGET, mounted_staging_area, user_name]}
          implementation: playbooks/create_staging_area_directory.yaml
  org.lexis.datatransfer.nodes.CopyFilesToStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Copy files from a source directory to a staging area directory
    properties:
      source_directory:
        description: Source directory
        type: string
        required: true
      source_files_patterns:
        type: list
        entry_schema:
          type: string
        description: |
          List of file patterns to copy from source directory
        required: true
      destination_subdirectory:
        description: Subdirectory in staging area where to store the source directory content
        type: string
        required: false
    attributes:
      directory_absolute_path: {get_operation_output: [SELF, Standard, start, DIRECTORY_ABSOLUTE_PATH]}
    capabilities:
      cloud_area_directory_provider:
        type: org.ddi.capabilities.CloudAreaDirectoryProvider
    requirements:
      - cloud_area_directory_provider:
          capability: org.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_directory: {get_property: [SELF, source_directory]}
            destination_subdirectory: {get_property: [SELF, destination_subdirectory]}
            destination_directory: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, directory_absolute_path]}
            source_files_patterns: {get_property: [SELF, source_files_patterns]}
            user_name: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, user_name]}
          implementation: playbooks/copy_to_staging_area_directory.yaml
  org.lexis.datatransfer.nodes.CopyToStagingAreaDirectory:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Copy a source directory to a staging area directory
    properties:
      source_directory:
        description: Source directory
        type: string
        required: true
      destination_subdirectory:
        description: Subdirectory in staging area where to store the source directory content
        type: string
        required: false
    attributes:
      directory_absolute_path: {get_operation_output: [SELF, Standard, start, DIRECTORY_ABSOLUTE_PATH]}
    capabilities:
      cloud_area_directory_provider:
        type: org.ddi.capabilities.CloudAreaDirectoryProvider
    requirements:
      - cloud_area_directory_provider:
          capability: org.ddi.capabilities.CloudAreaDirectoryProvider
          relationship: org.ddi.relationships.CloudAreaDirectoryProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_directory: {get_property: [SELF, source_directory]}
            source_files_patterns: []
            destination_subdirectory: {get_property: [SELF, destination_subdirectory]}
            destination_directory: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, directory_absolute_path]}
            user_name: {get_attribute: [REQ_TARGET, cloud_area_directory_provider, user_name]}
          implementation: playbooks/copy_to_staging_area_directory.yaml
  org.lexis.datatransfer.nodes.CopyToStagingArea:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Copy a source directory to the staging area
    properties:
      source_directory:
        description: Source directory to copy
        type: string
        required: true
      destination_directory:
        description: destination directory in staging area (relative path, will be created if it does not exist)
        type: string
        required: true
      create_timestamp_destination_subdirectory:
        description: If true, a subdirectory will be created under the destination directory
        type: boolean
        default: false
    attributes:
      staging_area_directory_path: {get_operation_output: [SELF, Standard, start, STAGING_AREA_DIRECTORY]}
      directory_absolute_path: {get_operation_output: [SELF, Standard, start, DIRECTORY_ABSOLUTE_PATH]}
    capabilities:
      cloud_area_directory_provider:
        type: org.ddi.capabilities.CloudAreaDirectoryProvider
    requirements:
      - mounted_staging_area:
          capability: org.lexis.datatransfer.capabilities.MountedStagingAreaAccess
          relationship: org.lexis.datatransfer.relationships.MountedCloudStagingArea
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_directory: {get_property: [SELF, source_directory]}
            destination_directory: {get_property: [SELF, destination_directory]}
            create_timestamp_destination_subdirectory: {get_property: [SELF, create_timestamp_destination_subdirectory]}
            mount_point: {get_property: [REQ_TARGET, mounted_staging_area, mount_point]}
            user_name: {get_property: [REQ_TARGET, mounted_staging_area, user_name]}
          implementation: playbooks/copy_to_staging_area.yaml
  org.lexis.datatransfer.nodes.CopyFromStagingArea:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Copy a file from the staging area (provided by the file provider in this component requirements)
    properties:
      destination_directory:
        description: destination directory (will be created if it does not exist)
        type: string
        required: true
    requirements:
      - file_provider:
          capability: org.lexis.datatransfer.capabilities.FileProvider
          relationship: org.lexis.datatransfer.relationships.FileProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_path: {get_attribute: [REQ_TARGET, file_provider, path]}
            user_name: {get_attribute: [REQ_TARGET, file_provider, user]}
            destination_directory: {get_property: [SELF, destination_directory]}
          implementation: playbooks/copy_from_staging_area.yaml
  org.lexis.datatransfer.nodes.CopyFilesFromProvider:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
       Copy files provided by a files provider
    properties:
      destination_directory:
        description: destination directory (will be created if it does not exist)
        type: string
        required: true
    requirements:
      - files_provider:
          capability: org.lexis.datatransfer.capabilities.FilesProvider
          relationship: org.lexis.datatransfer.relationships.FilesProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            source_paths: {get_attribute: [REQ_TARGET, files_provider, paths]}
            user_name: {get_attribute: [REQ_TARGET, files_provider, user]}
            destination_directory: {get_property: [SELF, destination_directory]}
          implementation: playbooks/copy_files_from_provider.yaml
capability_types:
  org.lexis.datatransfer.capabilities.MountedStagingAreaAccess:
    derived_from: tosca.capabilities.Root
    description: >
      A capability fulfilling requirements of a node requiring to be
      associated with a mounted staging area.
  org.lexis.datatransfer.capabilities.FileProvider:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a component providing access to a file as a given user.
    attributes:
      path:
        type: string
        description: Path to file
      user:
        type: string
        description: User having access to this file
  org.lexis.datatransfer.capabilities.FilesProvider:
    derived_from: tosca.capabilities.Root
    description: >
      A capability provided by a component providing access to files as a given user.
    attributes:
      paths:
        type: string
        description: Space-separated list of file paths
      user:
        type: string
        description: User having access to this file
relationship_types:
  org.lexis.datatransfer.relationships.MountCloudStagingArea:
    derived_from: tosca.relationships.DependsOn
    description: >
      Depends on a mounted Cloud Staging Area
    valid_target_types: [ org.ddi.capabilities.CloudStagingAreaAccess ]
  org.lexis.datatransfer.relationships.MountedCloudStagingArea:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects to a node mouting the staging area
    valid_target_types: [ org.lexis.datatransfer.MountedStagingAreaAccess ]
  org.lexis.datatransfer.relationships.FileProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of a file
    valid_target_types: [ org.lexis.datatransfer.capabilities.FileProvider ]
  org.lexis.datatransfer.relationships.FilesProvider:
    derived_from: tosca.relationships.DependsOn
    description: >
      Relationship with a provider of files
    valid_target_types: [ org.lexis.datatransfer.capabilities.FilesProvider ]
