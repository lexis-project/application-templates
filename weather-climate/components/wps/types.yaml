tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.lexis.weather.wps
  template_version: 0.1.1-SNAPSHOT
  template_author: lexis

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-types:1.1.0
  - org.lexis.common.datatransfer:0.1.2-SNAPSHOT
node_types:
  org.lexis.nodes.GFSData:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      start_date:
        type: string
        description: Download GFS files from this date, format YYYYMMDDHH
        required: true
      end_date:
        type: string
        description: Download GFS files up to this date, format YYYYMMDDHH
        required: true
      number_of_past_days:
        type: string
        description: Download additional warmup data for this given number of days before the start date
        required: true
      with_data_assimilation:
        type: boolean
        default: false
        required: false
      left_longitude:
        type: string
        description: Left longitude
      right_longitude:
        type: string
        description: Right longitude
      top_latitude:
        type: string
        description: Top latitude
      bottom_latitude:
        type: string
        description: Bottom latitude
      output_directory:
        type: string
        description: Absolute path to directory where to store donwloaded data
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            START_DATE: {get_property: [SELF, start_date]}
            END_DATE: {get_property: [SELF, end_date]}
            NUMBER_OF_PAST_DAYS: {get_property: [SELF, number_of_past_days]}
            WITH_DATA_ASSIMILATION:  {get_property: [SELF, with_data_assimilation]}
            LEFT_LONGITUDE: {get_property: [SELF, left_longitude]}
            RIGHT_LONGITUDE: {get_property: [SELF, right_longitude]}
            TOP_LATITUDE: {get_property: [SELF, top_latitude]}
            BOTTOM_LATITUDE: {get_property: [SELF, bottom_latitude]}
            OUTPUT_DIRECTORY: {get_property: [SELF, output_directory]}
          implementation: playbooks/download_gfs.yaml
    tags:
      icon: /images/GFS.png
  org.lexis.nodes.GetGEOGDataFromFiles:
    derived_from: tosca.nodes.SoftwareComponent
    description: Get geographical data from zipped archive files
    properties:
     output_directory:
        type: string
        description: Absolute path to directory where to store geographical data
    requirements:
      - files_provider:
          capability: org.lexis.datatransfer.capabilities.FilesProvider
          relationship: org.lexis.datatransfer.relationships.FilesProvider
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            FILES: {get_attribute: [REQ_TARGET, files_provider, paths]}
            USER: {get_attribute: [REQ_TARGET, files_provider, user]}
            OUTPUT_DIRECTORY: {get_property: [SELF, output_directory]}
          implementation: playbooks/get_geog_data_from_files.yaml
    tags:
      icon: /images/GEOG.png
  org.lexis.nodes.DownloadGEOGData:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
     output_directory:
        type: string
        description: Absolute path to directory where to store donwloaded data
    interfaces:
      Standard:
        create:
          implementation: playbooks/noop.yaml
        start:
          inputs:
            OUTPUT_DIRECTORY: {get_property: [SELF, output_directory]}
          implementation: playbooks/download_geog.yaml
    tags:
      icon: /images/GEOG.png
  org.lexis.nodes.PWSData:
    derived_from: tosca.nodes.SoftwareComponent
    description: Get data from Personal Weather Stations
    interfaces:
      Standard:
        create:
          implementation: playbooks/install_drops2.yaml
