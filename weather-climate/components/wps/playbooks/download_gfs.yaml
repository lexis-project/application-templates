- name: Get GFS data
  hosts: all
  strategy: free
  vars:
    gfsdates: []
  tasks:
    - name: Compute date in seconds (end data - start date + 48 hours)
      set_fact:
        gfsDay: "{{START_DATE[:8]}}"
        gfsStartHour: "{{START_DATE[8:]}}"
        nbHours: "{{ ((((END_DATE|to_datetime('%Y%m%d%H')) - (START_DATE|to_datetime('%Y%m%d%H'))).total_seconds() / 3600) + 48) | int }}"
        dateSeconds: "{{ (START_DATE|to_datetime('%Y%m%d%H')).strftime('%s') }}"
    - name: Check if data assimilation is requested
      set_fact:
        with_data_assimilation: "{{ WITH_DATA_ASSIMILATION | bool }}"
    - name: Compute date for data assimilation (6 hours before)
      set_fact:
        assimilationDate: "{{ '%Y%m%d%H' | strftime( (dateSeconds | int - (3600 * 6 ))) }}"
      when: with_data_assimilation
    - name: Compute day and hour for data assimilation
      set_fact:
        gfsDay: "{{assimilationDate[:8]}}"
        gfsStartHour: "{{assimilationDate[8:]}}"
        nbHours: "{{ nbHours|int + 6}}"
        nbHoursPastDays: "30"
        dateSeconds: "{{ (assimilationDate|to_datetime('%Y%m%d%H')).strftime('%s') }}"
      when: with_data_assimilation
    - name: Define number of hours to get for past days without data assimilation
      set_fact:
        nbHoursPastDays: "24"
      when: not with_data_assimilation
    - name: Compute number of days since current data
      set_fact:
        nbDays: "{{ (((ansible_date_time.iso8601_basic_short[:8] | to_datetime ('%Y%m%d')) - (gfsDay|to_datetime('%Y%m%d'))).total_seconds() / 3600 / 24) | int }}"
    - name: Check if these are historical data, including the request past day if any
      set_fact:
        historical_data: "{{ ( (nbDays|int + PAST_DAY_NUMBER|int) > 9) | bool}}"
    - name: Update date in seconds and number of hours t dmowload if we fetch data for a previous date
      set_fact:
        dateSeconds: "{{ dateSeconds|int - (3600 * 24 * PAST_DAY_NUMBER|int)}}"
        nbHours: "{{ nbHoursPastDays }}"
      when: PAST_DAY_NUMBER|int > 0
    - name: Update GFS date accordingly
      set_fact:
        gfsdate: "{{'%Y%m%d' | strftime( (dateSeconds | int)) }}"
    - name: Create output directory
      become: true
      become_method: sudo
      file:
        path: "{{ OUTPUT_DIRECTORY }}//{{ gfsdate[:4] }}/{{ gfsdate[4:6] }}/{{ gfsdate[6:8] }}/{{gfsStartHour}}00"
        state: directory
        recurse: yes
        mode: 0777
    - name: Download GFS analysis of initial atmospheric conditions file for each day
      get_url:
        url: "https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?file=gfs.t{{ gfsStartHour }}z.pgrb2.0p25.anl&subregion=&leftlon={{ LEFT_LONGITUDE }}&rightlon={{ RIGHT_LONGITUDE }}&toplat={{ TOP_LATITUDE }}&bottomlat={{ BOTTOM_LATITUDE }}&dir=%2Fgfs.{{ gfsdate }}%2F{{ gfsStartHour }}%2Fatmos"
        dest: "{{ OUTPUT_DIRECTORY }}/{{ gfsdate[:4] }}/{{ gfsdate[4:6] }}/{{ gfsdate[6:8] }}/{{gfsStartHour}}00"
        mode: 0755
      when: not historical_data
    - name: Download GFS data files for the specifed start and end date
      get_url:
        url: "https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?file=gfs.t{{ gfsStartHour }}z.pgrb2.0p25.{{ 'f0%02d' | format(item) }}&subregion=&leftlon={{ LEFT_LONGITUDE }}&rightlon={{ RIGHT_LONGITUDE }}&toplat={{ TOP_LATITUDE }}&bottomlat={{ BOTTOM_LATITUDE }}&dir=%2Fgfs.{{ gfsdate }}%2F{{ gfsStartHour }}%2Fatmos"
        dest: "{{ OUTPUT_DIRECTORY }}//{{ gfsdate[:4] }}/{{ gfsdate[4:6] }}/{{ gfsdate[6:8] }}/{{gfsStartHour}}00/gfs.t{{ gfsStartHour }}z.pgrb2.0p25.{{ 'f0%02d' | format(item) }}.grb"
        mode: 0755
      loop: "{{ range(0, nbHours|int + 1, 1)|list }}"
      when: not historical_data

    # Playbook is done if the start data is less than 10 days ago (not historical data)
    - meta: end_play
      when: not historical_data

    # Need historical data
    - name: Login on historical data site
      uri:
        url: "https://rda.ucar.edu/cgi-bin/login"
        method: POST
        return_content: yes
        validate_certs: no
        body:
          email: "{{ EMAIL_ADDRESS }}"
          passwd: "{{ PASSWORD }}"
          action: "login"
        body_format: form-urlencoded
        status_code: [200, 302]
      register: login
    - name: Download GFS data files for the specifed start and end date
      get_url:
        url: "https://rda.ucar.edu/data/ds084.1/{{ gfsdate[:4] }}/{{ gfsdate }}/gfs.0p25.{{ gfsdate }}{{gfsStartHour}}.{{ 'f0%02d' | format(item) }}.grib2"
        dest: "{{ OUTPUT_DIRECTORY }}//{{ gfsdate[:4] }}/{{ gfsdate[4:6] }}/{{ gfsdate[6:8] }}/{{gfsStartHour}}00"
        mode: 0755
        headers:
          Cookie: "{{ login.set_cookie }}"
      loop: "{{ range(0|int, nbHours|int + 1, 3)|list }}"
