tosca_definitions_version: alien_dsl_3_0_0

metadata:
  template_name: org.lexis.wp7.ADMSWindowsTestTemplate
  template_version: 0.1.0-SNAPSHOT
  template_author: lexisadmin

description: "Basic ADMS Test"

imports:
  - yorc-types:1.1.0
  - yorc-openstack-types:3.1.0
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:3.0.0
  - org.lexis.wp7.adms:0.1.0

topology_template:
  inputs:
    token:
      type: string
      required: true
      description: "OpenID Connect token"
    postprocessing_adms_type:
      type: string
      description: type of ADMS simulation executed, urban or industrial
      required: true
    postprocessing_title_dataset_adms_result:
      type: string
      description: Which will be the title of the dataset containing ADMS results
      default: ADMS tests results
      required: false
    postprocessing_dataset_title_ncl_result:
      type: string
      description: Title of the dataset containing NCL results
      default: "ADMS Workflow result - 2020102700"
      required: false
    postprocessing_dataset_id_adms_urban_app:
      type: string
      description: ID of the dataset containing the ADMSUrban.exe and corresponding files. The DDI dataset has to contain single file called adms_urban.zip
      default: "f284db6c-2588-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_urban_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSUrban
      default: "f1275722-25b5-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_app:
      type: string
      description: ID of the dataset containing the ADMSIndustrial.exe and corresponding files. The DDI dataset has to contain single file called adms_industrial.zip
      default: "317feadc-25ac-11eb-bbae-0050568fcecc"
      required: false
    postprocessing_dataset_id_adms_industrial_static_data:
      type: string
      description: ID of the dataset containing the static data for ADMSIndustrial
      default: "b6e09a96-25ac-11eb-bbae-0050568fcecc"
      required: false
  node_templates:
    PublicNet:
      type: tosca.nodes.Network
      properties:
        ip_version: 4
    ADMS_VM:
      type: tosca.nodes.Compute
      requirements:
        - networkNetworkConnection:
            type_requirement: network
            node: PublicNet
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
      capabilities:
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
        os:
          properties:
            type: "windows_adms"
    GetDDIAccessWinVM:
      type: org.lexis.common.ddi.nodes.DDIAccess
      requirements:
        - hostedOnComputeHost:
            type_requirement: os
            node: ADMS_VM
            capability: tosca.capabilities.OperatingSystem
            relationship: org.lexis.common.ddi.relationships.SameSite
    RefreshTargetTokens:
      type: org.lexis.common.dynamic.orchestration.nodes.RefreshTargetTokens
      requirements:
        - target:
            type_requirement: target
            node: ADMS
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ADMS:
      type: org.lexis.wp7.nodes.ADMS
      properties:
        adms_type: { get_input: postprocessing_adms_type }
        token: { get_input: token }
        dataset_title_adms_result: { get_input: postprocessing_title_dataset_adms_result }
        dataset_title_ncl_result: { get_input: postprocessing_dataset_title_ncl_result }
        dataset_id_adms_urban_app: { get_input: postprocessing_dataset_id_adms_urban_app }
        dataset_id_adms_urban_static_data: { get_input: postprocessing_dataset_id_adms_urban_static_data }
        dataset_id_adms_industrial_app: { get_input: postprocessing_dataset_id_adms_industrial_app }
        dataset_id_adms_industrial_static_data: { get_input: postprocessing_dataset_id_adms_industrial_static_data }
      requirements:
        - ddi_access:
            type_requirement: ddi_access
            node: GetDDIAccessWinVM
            capability: org.lexis.common.ddi.capabilities.DDIAccess
            relationship: org.lexis.common.ddi.relationships.DDIAccessProvider
        - hostedOnAdmsVmHost:
            type_requirement: host
            node: ADMS_VM
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
  outputs:
    dataset_id_post_process_results:
      description: ID of the dataset where ADMS post-process results are stored
      value: { get_attribute: [ ADMS, dataset_id_result ] }
  workflows:
    install:
      steps:
        Network_install:
          target: PublicNet
          activities:
            - delegate: install
    uninstall:
      steps:
        Compute_uninstall:
          target: ADMS_VM
          activities:
            - delegate: uninstall
        Network_uninstall:
          target: PublicNet
          activities:
            - delegate: uninstall
    Run:
      steps:
        Compute_install:
          target: ADMS_VM
          activities:
            - delegate: install
          on_success:
            - GetDDIAccessWinVM_start
        GetDDIAccessWinVM_start:
          target: GetDDIAccessWinVM
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccessWinVM_started
        GetDDIAccess_started:
          target: GetDDIAccessWinVM
          activities:
            - set_state: started
          on_success:
            - RefreshTargetTokens_start
        RefreshTargetTokens_start:
          target: RefreshTargetTokens
          activities:
            - call_operation: Standard.start
          on_success:
            - RefreshTargetTokens_started
        RefreshTargetTokens_started:
          target: RefreshTargetTokens
          activities:
            - set_state: started
          on_success:
            - ADMS_start
        ADMS_start:
          target: ADMS
          activities:
            - call_operation: Standard.start
    testADMS:
      steps:
        GetDDIAccessWinVM_start:
          target: GetDDIAccessWinVM
          activities:
            - call_operation: Standard.start
          on_success:
            - GetDDIAccessWinVM_started
        GetDDIAccess_started:
          target: GetDDIAccessWinVM
          activities:
            - set_state: started
          on_success:
            - ADMS_start
        ADMS_start:
          target: ADMS
          activities:
            - call_operation: Standard.start
